Lab: 1 Install Helm in kubernetes Cluster 

wget https://get.helm.sh/helm-v3.5.0-rc.2-linux-amd64.tar.gz

tar -xzvf helm-v3.5.0-rc.2-linux-amd64.tar.gz 

mv linux-amd64/helm /bin

helm version


Helm Commands 
# this will print helm help
helm

# to see all available package in hub
helm search hub

# to list mysql charts
helm search hub mysql

# to list all available repo
helm repo list

# add helm repo named bitnami
helm repo add bitnami https://charts.bitnami.com/bitnami

# search bitnami named repo in server
helm search repo bitnami

#update repo
Helm repo update

# Search chart in specific repo
helm search repo bitnami/mysql
helm search repo -l bitnami/mysql #list all available versions 


Helm commands Ref:  https://helm.sh/docs/intro/cheatsheet/




Lab: 2 Chart Structure

apt update && apt install tree -y

helm create mychart


controlplane $ tree mychart/
mychart/
|-- Chart.yaml
|-- charts
|-- templates
|   |-- NOTES.txt
|   |-- _helpers.tpl
|   |-- deployment.yaml
|   |-- hpa.yaml
|   |-- ingress.yaml
|   |-- service.yaml
|   |-- serviceaccount.yaml
|   `-- tests
|       `-- test-connection.yaml
`-- values.yaml

helm install webapp mychart/
helm ls 

kubectl get deploy
kubectl get pods

Dry- Run
helm install --debug --dry-run mychart ./mychart/

helm install mychart ./mychart/

see YAML file of running Helm chart
helm get manifest mychart




Lab: 3 Create Custom Chart 

mkdir -p myapp/charts && mkdir -p myapp/templates

cd myapp

cat <<EOT >> Chart.yaml 
apiVersion: v2
name: mychart
description: A Helm chart for Kubernetes
type: application
version: 0.1.0
appVersion: "1.16.0"
EOT


cat <<EOT >> values.yaml 
test content 
EOT


cat <<EOT >> templates/deployment.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mydep
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80

EOT


cat <<EOT >> templates/service.yaml 
apiVersion: v1
kind: Service
metadata:
  name: myapp-svc
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
  type: NodePort 
EOT


$ tree
.
|-- Chart.yaml
|-- charts
|-- templates
|   |-- deployment.yaml
|   `-- service.yaml
`-- values.yaml

helm install mychart ./myapp
kubectl get deployment 
kubectl get pods

helm uninstall mychart





Lab: 4  Create template

mkdir -p myapp/charts && mkdir -p myapp/templates

cd myapp

cat <<EOT >> Chart.yaml 
apiVersion: v2
name: mychart
description: A Helm chart for Kubernetes
type: application
version: 0.1.0
appVersion: "1.16.0"
EOT


cat <<EOT >> values.yaml 
replicaCount: 1
app:
  name: myapp
  image: nginx
  ports:
    containerPort: 80
EOT


cat <<EOT >> templates/deployment.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "myapp.applabels" . | nindent 7 }}
  template:
    metadata:
      labels:
        {{- include "myapp.applabels" . | nindent 9 }}
    spec:
      containers:
      - image: {{ .Values.app.image }}
        name: {{ .Values.app.name }}
        ports:
        - containerPort: {{ .Values.app.ports.containerport }}

EOT


cat <<EOT >> templates/service.yaml 
apiVersion: v1
kind: Service
metadata:
  name: myapp-svc
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
  type: NodePort 
EOT



cat <<EOT >> templates/_helpers.tpl 
{{- define "myapp.applabels" -}}
app: myapp
{{- end }} 
EOT


cat <<EOT >> templates/NOTES.txt  
Thank you for support {{ .Chart.Name }}.
  
 Your release is named {{ .Release.Name }}.

 To learn more about the release, try:

   $ helm status {{ .Release.Name }}
   $ helm get all {{ .Release.Name }}
   $ helm uninstall {{ .Release.Name }}
EOT




$ tree
.
|-- Chart.yaml
|-- charts
|-- templates
|   |-- deployment.yaml
|   `-- service.yaml
`-- values.yaml



Debug Chart before deployment 

helm install --debug --dry-run myappp myapp/


change values dynamically 

helm install --debug --dry-run myappp --set replicaCount=5 myapp/

helm install mychart ./myapp
kubectl get deployment 
kubectl get pods

apply values from values_qa.yaml

cat <<EOT >> values_qa.yaml
replicaCount: 5
EOT

 helm install --values values_qa.yaml myappp ./mychart/

helm uninstall mychart
