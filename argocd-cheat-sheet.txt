Task: 1 install argocd in kops cluster

kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

create clusterip to nodeport service 
kubectl -n argocd edit svc argocd-server

change type: NodePort

command to get argocd admin user password

kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d


Task: 2 install argocd binary command

wget https://github.com/argoproj/argo-cd/releases/download/v2.7.3/argocd-linux-amd64
chmod +x argocd-linux-amd64
mv argocd-linux-amd64 argocd
mv argocd /bin


Task: 3 login to argocd from CMD

argoPass=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)

argocd login --insecure --grpc-web 65.0.85.229:31326 --username admin --password $argoPass



Task: 4  Create deployment using CLI / Imperative.

argocd app create testfromcli --repo https://github.com/eraneeshansari/test123.git --path ./ --dest-server https://kubernetes.default.svc --dest-namespace default

As for the flags in the command:

--repo: specify the Git repository.
--path: specify the relative path of the deployment files in the Git repository.
--dest-server: address for accessing the cluster.
--dest-namespace: namespace for deploying the application.



# List all the applications.
  argocd app list

# Get the details of a application
  argocd app get testfromcli

Sync application from CLI
argocd app sync testfromcli


get yaml of deployment 
argocd app manifests testfromcli


List resource of application
argocd app resources testfromcli

Delete application
argocd app delete testfromcli


Task: 5 Repeat above task from GUI

Task: 6 Create application using application YAML 



Task: 7 Create application in argocd using private github repo

vi orange-application.yaml

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: orange-app
  namespace: argocd
spec:
  syncPolicy:
    automated:
      prune: true
  project: default
  source:
    repoURL: https://github.com/eraneeshansari/orange.git
    targetRevision: HEAD
    path: ./
  destination:
    server: https://kubernetes.default.svc
    namespace: default


kubectl create -f orange-app.yaml
argocd app list



Task: 8  settingup timeout / autosync time , ( without reconciliation time argocd sync by default in 3 minutes)

kubectl -n argocd describe pod argocd-repo-server-7c59ff786d-7n7hq | grep -i "ARGOCD_RECONCILIATION_TIMEOUT"

patch command to set reconciliation time 5 minute
kubectl -n argocd  patch cm argocd-cm --patch='{"data":{"timeout.reconciliation":"300s"}}'

check reconciliation time in yaml format.
kubectl -n argocd get cm argocd-cm -o yaml



Task: 9 Webhook setup

step: 1 select your repo > goto setting > click webhooks

payload URL 

http://MasterNodes-IP:PORT/api/webhook


step: 2 enable insecure access on browser
Edit deployment 
 
kubectl -n argocd edit deployments.apps argocd-server

add following lines in args section

      containers:
      - args:
        - /usr/local/bin/argocd-server
        - --insecure

Now wait for pod to be recreated..

Step: 3 enable insecure connection using configmap
add following code 


kubectl -n argocd edit cm argocd-cmd-params-cm

apiVersion: v1
data:
  server.insecure: "true"
kind: ConfigMap


Step: 4 create application in argocd , after successful deployment change something in github 
to see changes...


Task: 10 deploy application using helm chart

add helm repo in argocd 

settings > Repositories > connect repo

Choose your connection method: https

CONNECT REPO USING HTTPS: type > Helm

name: helm-repo


project : default 

Repository URL: https://charts.bitnami.com/bitnami


click on connect button 

